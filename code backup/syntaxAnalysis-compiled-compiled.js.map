{"version":3,"sources":["syntaxAnalysis-compiled.js"],"names":[],"mappings":"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","file":"syntaxAnalysis-compiled-compiled.js","sourcesContent":["// Copyright 2016, Google, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n// [START all]\n// [START setup]\n// By default, the client will authenticate using the service account file\n// specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable and use\n// the project specified by the GCLOUD_PROJECT environment variable. See\n// https://googlecloudplatform.github.io/gcloud-node/#/docs/google-cloud/latest/guides/authentication\n\nvar Language = require('@google-cloud/language');\nvar Storage = require('@google-cloud/storage');\n\n// Instantiate the language client\nvar language = Language();\n// Instantiate the storage client\nvar storage = Storage();\n// [END setup]\n\n// [START analyze_sentiment_from_string]\n/**\n * Detect the sentiment of a block of text.\n *\n * @param {string} text The text to analyze.\n * @param {object} [options] Configuration options.\n * @param {string} [options.type] The type of the text, either \"text\" or \"html\".\n * @param {string} [options.language] The language of the text, e.g. \"en\".\n * @param {function} callback The callback function.\n */\nfunction analyzeSentimentFromString(text, options, callback) {\n    var document = language.document({\n        content: text,\n        type: options.type,\n        language: options.language\n    });\n\n    var config = {\n        // Get more detailed results\n        verbose: true\n    };\n\n    // See https://googlecloudplatform.github.io/google-cloud-node/#/docs/language/latest/language/document\n    document.detectSentiment(config, function (err, sentiment) {\n        if (err) {\n            return callback(err);\n        }\n\n        console.log('Found %s sentiment', sentiment.polarity >= 0 ? 'positive' : 'negative');\n        return callback(null, sentiment);\n    });\n}\n// [END analyze_sentiment_from_string]\n\n// [START analyze_sentiment_from_file]\n/**\n * Detect the sentiment in a text file that resides in Google Cloud Storage.\n *\n * @param {string} bucket The bucket where the file resides.\n * @param {string} filename The name of the file to be analyzed.\n * @param {object} [options] Optional configuration.\n * @param {string} [options.language] The language of the text, e.g. \"en\".\n * @param {string} [options.type] The type of the text, either \"text\" or \"html\".\n * @param {function} callback The callback function.\n */\nfunction analyzeSentimentFromFile(bucket, filename, options, callback) {\n    var document = language.document({\n        content: storage.bucket(bucket).file(filename),\n        type: options.type,\n        language: options.language\n    });\n\n    var config = {\n        // Get more detailed results\n        verbose: true\n    };\n\n    // See https://googlecloudplatform.github.io/google-cloud-node/#/docs/language/latest/language/document\n    document.detectSentiment(config, function (err, sentiment) {\n        if (err) {\n            return callback(err);\n        }\n\n        console.log('Found %s sentiment', sentiment.polarity >= 0 ? 'positive' : 'negative');\n        return callback(null, sentiment);\n    });\n}\n// [END analyze_sentiment_from_file]\n\n// [START analyze_entities_from_string]\n/**\n * Detect the entities from a block of text.\n *\n * @param {string} text The text to analyze.\n * @param {object} [options] Optional configuration.\n * @param {string} [options.language] The language of the text, e.g. \"en\".\n * @param {string} [options.type] The type of the text, either \"text\" or \"html\".\n * @param {function} callback The callback function.\n */\nfunction analyzeEntitiesFromString(text, options, callback) {\n    var document = language.document({\n        content: text,\n        type: options.type,\n        language: options.language\n    });\n\n    var config = {\n        // Get more detailed results\n        verbose: true\n    };\n\n    // See https://googlecloudplatform.github.io/google-cloud-node/#/docs/language/latest/language/document\n    document.detectEntities(config, function (err, entities) {\n        if (err) {\n            return callback(err);\n        }\n\n        console.log('Found %d entity type(s)!', Object.keys(entities).length);\n        return callback(null, entities);\n    });\n}\n// [END analyze_entities_from_string]\n\n// [START analyze_entities_from_file]\n/**\n * Detect the entities in a text file that resides in Google Cloud Storage.\n *\n * @param {string} bucket The bucket where the file resides.\n * @param {string} filename The name of the file to be analyzed.\n * @param {object} [options] Optional configuration.\n * @param {string} [options.language] The language of the text, e.g. \"en\".\n * @param {string} [options.type] The type of the text, either \"text\" or \"html\".\n * @param {function} callback The callback function.\n */\nfunction analyzeEntitiesFromFile(bucket, filename, options, callback) {\n    var document = language.document({\n        content: storage.bucket(bucket).file(filename),\n        type: options.type,\n        language: options.language\n    });\n\n    var config = {\n        // Get more detailed results\n        verbose: true\n    };\n\n    // See https://googlecloudplatform.github.io/google-cloud-node/#/docs/language/latest/language/document\n    document.detectEntities(config, function (err, entities) {\n        if (err) {\n            return callback(err);\n        }\n\n        console.log('Found %d entity type(s)!', Object.keys(entities).length);\n        return callback(null, entities);\n    });\n}\n// [END analyze_entities_from_file]\n\n// [START analyze_syntax_from_string]\n/**\n * Detect the syntax in a block of text.\n *\n * @param {string} text The text to analyze.\n * @param {object} [options] Optional configuration.\n * @param {string} [options.language] The language of the text, e.g. \"en\".\n * @param {string} [options.type] The type of the text, either \"text\" or \"html\".\n * @param {function} callback The callback function.\n */\nfunction analyzeSyntaxFromString(text, options, callback) {\n    var document = language.document({\n        content: text,\n        type: options.type,\n        language: options.language\n    });\n\n    var config = {\n        syntax: true\n    };\n\n    // See https://googlecloudplatform.github.io/google-cloud-node/#/docs/language/latest/language/document\n    document.annotate(config, function (err, result, apiResponse) {\n        if (err) {\n            return callback(err);\n        }\n\n        console.log('Done analyzing syntax');\n        return callback(null, apiResponse);\n    });\n}\n// [END analyze_syntax_from_string]\n\n// [START analyze_syntax_from_file]\n/**\n * Detect the syntax in a text file that resides in Google Cloud Storage.\n *\n * @param {string} bucket The bucket where the file resides.\n * @param {string} filename The name of the file to be analyzed.\n * @param {object} [options] Optional configuration.\n * @param {string} [options.language] The language of the text, e.g. \"en\".\n * @param {string} [options.type] The type of the text, either \"text\" or \"html\".\n * @param {function} callback The callback function.\n */\nfunction analyzeSyntaxFromFile(bucket, filename, options, callback) {\n    var document = language.document({\n        content: storage.bucket(bucket).file(filename),\n        type: options.type,\n        language: options.language\n    });\n\n    var config = {\n        syntax: true\n    };\n\n    // See https://googlecloudplatform.github.io/google-cloud-node/#/docs/language/latest/language/document\n    document.annotate(config, function (err, result, apiResponse) {\n        if (err) {\n            return callback(err);\n        }\n\n        console.log('Done analyzing syntax');\n        return callback(null, apiResponse);\n    });\n}\n// [END analyze_syntax_from_file]\n// [END all]\n\n// The command-line program\nvar cli = require('yargs');\nvar utils = require('../utils');\n\nvar program = module.exports = {\n    analyzeSentimentFromString: analyzeSentimentFromString,\n    analyzeSentimentFromFile: analyzeSentimentFromFile,\n    analyzeEntitiesFromString: analyzeEntitiesFromString,\n    analyzeEntitiesFromFile: analyzeEntitiesFromFile,\n    analyzeSyntaxFromString: analyzeSyntaxFromString,\n    analyzeSyntaxFromFile: analyzeSyntaxFromFile,\n    main: function (args) {\n        // Run the command-line program\n        cli.help().strict().parse(args).argv;\n    }\n};\n\ncli.demand(1).command('sentimentFromString <text>', 'Detect the sentiment of a block of text.', {}, function (options) {\n    program.analyzeSentimentFromString(options.text, utils.pick(options, ['language', 'type']), utils.makeHandler());\n}).command('sentimentFromFile <bucket> <filename>', 'Detect the sentiment of text in a GCS file.', {}, function (options) {\n    program.analyzeSentimentFromFile(options.bucket, options.filename, utils.pick(options, ['language', 'type']), utils.makeHandler());\n}).command('entitiesFromString <text>', 'Detect the entities of a block of text.', {}, function (options) {\n    program.analyzeEntitiesFromString(options.text, utils.pick(options, ['language', 'type']), utils.makeHandler());\n}).command('entitiesFromFile <bucket> <filename>', 'Detect the entities of text in a GCS file.', {}, function (options) {\n    program.analyzeEntitiesFromFile(options.bucket, options.filename, utils.pick(options, ['language', 'type']), utils.makeHandler());\n}).command('syntaxFromString <text>', 'Detect the syntax of a block of text.', {}, function (options) {\n    program.analyzeSyntaxFromString(options.text, utils.pick(options, ['language', 'type']), utils.makeHandler());\n}).command('syntaxFromFile <bucket> <filename>', 'Detect the syntax of text in a GCS file.', {}, function (options) {\n    program.analyzeSyntaxFromFile(options.bucket, options.filename, utils.pick(options, ['language', 'type']), utils.makeHandler());\n}).options({\n    language: {\n        alias: 'l',\n        type: 'string',\n        requiresArg: true,\n        description: 'The language of the text.',\n        global: true\n    },\n    type: {\n        alias: 't',\n        type: 'string',\n        choices: ['text', 'html'],\n        default: 'text',\n        requiresArg: true,\n        description: 'Type of text.',\n        global: true\n    }\n}).example('node $0 sentimentFromString \"President Obama is speaking at the White House.\"', '').example('node $0 sentimentFromFile my-bucket file.txt', '').example('node $0 entitiesFromString \"<p>President Obama is speaking at the White House.</p>\" -t html', '').example('node $0 entitiesFromFile my-bucket file.txt', '').example('node $0 syntaxFromString \"President Obama is speaking at the White House.\"', '').example('node $0 syntaxFromFile my-bucket es_file.txt -l es', '').wrap(100).recommendCommands().epilogue('For more information, see https://cloud.google.com/natural-language/docs');\n\nif (module === require.main) {\n    program.main(process.argv.slice(2));\n}\n\n//# sourceMappingURL=syntaxAnalysis-compiled.js.map"]}