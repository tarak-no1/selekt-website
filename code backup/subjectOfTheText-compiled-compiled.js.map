{"version":3,"sources":["subjectOfTheText-compiled.js"],"names":[],"mappings":";;;AAGA;;;;;AAKA,MAAM,MAAM,QAAQ,UAAR,EAAoB,GAAhC;AACA,MAAM,KAAK,QAAQ,eAAR,CAAX;AACA,MAAM,SAAS,QAAQ,sBAAR,CAAf;AACA,MAAM,SAAS,QAAQ,aAAR,CAAf;AACA,MAAM,WAAW,QAAQ,oBAAR,CAAjB;AACA,MAAM,WAAW,QAAQ,eAAR,CAAjB;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,YAAY,QAAQ,uBAAR,CAAhB;AACA,MAAM,WAAW,QAAQ,eAAR,CAAjB;AACA,MAAM,aAAa,QAAQ,cAAR,CAAnB;;AAEA,IAAI,SAAS,QAAQ,wBAAR,CAAb;AACA,MAAM,SAAS,QAAQ,aAAR,CAAf;AACA,MAAM,WAAW,QAAQ,cAAR,CAAjB;AACA,MAAM,YAAY,QAAQ,gBAAR,CAAlB;AACA,MAAM,SAAS,QAAQ,qBAAR,CAAf;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;;AAEA,IAAI,UAAU,gBAAgB,WAAhB,EAAd;;AAEA,IAAI,cAAc,mEAAlB;AACA,IAAI,aAAa,cAAc,oBAA/B;AACA,IAAI,eAAe,cAAc,0BAAjC;AACA,IAAI,mBAAmB,GAAvB;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;;AAEA,OAAO,uBAAP,CAA+B,OAA/B,EAAwC,EAAxC,EAA4C,UAAU,MAAV,EAAkB,IAAlB,EAAwB;AAChE,QAAI,SAAS,KAAK,QAAL,CAAb;;AAEA,SAAK,IAAI,CAAT,IAAc,MAAd,EAAsB;AAClB,YAAI,QAAQ,OAAO,CAAP,CAAZ;AACA,YAAI,MAAM,cAAN,EAAsB,KAAtB,KAAgC,MAAhC,IAA0C,MAAM,cAAN,EAAsB,KAAtB,KAAgC,MAA1E,IAAoF,MAAM,cAAN,EAAsB,KAAtB,KAAgC,KAAxH,EAA+H;;AAE3H,sBAAU,QAAQ,OAAR,CAAgB,MAAM,MAAN,EAAc,SAAd,CAAhB,EAA0C,EAA1C,CAAV;AACH;;AAED,YAAI,MAAM,gBAAN,EAAwB,OAAxB,KAAoC,OAAxC,EAAiD;;;AAGhD;AACJ;AACD,cAAU,UAAU,MAApB;AACA,WAAO,uBAAP,CAA+B,OAA/B,EAAwC,EAAxC,EAA4C,UAAU,MAAV,EAAkB,IAAlB,EAAwB;AAChE,YAAI,SAAS,KAAK,QAAL,CAAb;;;AAGA,aAAK,IAAI,CAAT,IAAc,MAAd,EAAsB;AAClB,gBAAI,QAAQ,OAAO,CAAP,CAAZ;AACA,gBAAI,MAAM,cAAN,EAAsB,KAAtB,KAAgC,MAAhC,IAA0C,MAAM,cAAN,EAAsB,KAAtB,KAAgC,MAA9E,EAAsF;;;AAGrF;;AAED,gBAAI,MAAM,gBAAN,EAAwB,OAAxB,EAAiC,OAAjC,CAAyC,MAAzC,IAAmD,CAAC,CAAxD,EAA2D;AACvD,wBAAQ,GAAR,CAAY,uBAAuB,MAAM,MAAN,EAAc,SAAd,CAAnC;AACA;AACH;AACJ;AACJ,KAhBD;AAiBH,CAjCD","file":"subjectOfTheText-compiled-compiled.js","sourcesContent":["/**\n * Created by samba on 10/09/16.\n */\n'use strict';\n\n// Weather Example\n// See https://wit.ai/sungkim/weather/stories and https://wit.ai/docs/quickstart\n\nconst Wit = require('node-wit').Wit;\nconst FB = require('./facebook.js');\nconst Config = require('./../config/const.js');\nconst Search = require('./logics.js');\nconst lContext = require('./localContexts.js');\nconst Sessions = require('./sessions.js');\nvar http = require('http');\nvar Semantics = require('../semantics/check.js');\nconst Messages = require('./messages.js');\nconst witRequest = require('./request.js');\n// const mongoDB = require('./mongodb/update_mongo.js');\nvar watson = require('watson-developer-cloud');\nconst Helper = require('./helper.js');\nconst Mappings = require('./mapping.js');\nconst functions = require('./functions.js');\nconst syntax = require('./syntaxAnalysis.js');\nvar async = require('async');\nvar winston = require('winston');\n\nvar message = \"RAM of phones\".toLowerCase();\n\nvar base_folder = \"../node_modules/natural/lib/natural/brill_pos_tagger/data/English\";\nvar rules_file = base_folder + \"/tr_from_posjs.txt\";\nvar lexicon_file = base_folder + \"/lexicon_from_posjs.json\";\nvar default_category = 'N';\nvar natural = require('natural');\n\nsyntax.analyzeSyntaxFromString(message, [], function (bucket, data) {\n    var tokens = data[\"tokens\"];\n    // console.log(JSON.stringify(data,null,2));\n    for (var i in tokens) {\n        var token = tokens[i];\n        if (token['partOfSpeech'][\"tag\"] == 'VERB' || token['partOfSpeech'][\"tag\"] == 'PRON' || token['partOfSpeech'][\"tag\"] == 'DET') {\n            // console.log(\"Question is about \" + token['text']['content']);\n            message = message.replace(token['text']['content'], \"\");\n        }\n\n        if (token['dependencyEdge'][\"label\"] == 'NSUBJ') {\n            // console.log(\"Question is about \" + token['text']['content']);\n            // return;\n        }\n    }\n    message = message + \" are\";\n    syntax.analyzeSyntaxFromString(message, [], function (bucket, data) {\n        var tokens = data[\"tokens\"];\n        // console.log(JSON.stringify(data, null, 2));\n        // console.log(message);\n        for (var i in tokens) {\n            var token = tokens[i];\n            if (token['partOfSpeech'][\"tag\"] == 'VERB' || token['partOfSpeech'][\"tag\"] == 'PRON') {\n                // console.log(\"Question is about \" + token['text']['content']);\n                // message = message.replace(token['text']['content'], \"\");\n            }\n\n            if (token['dependencyEdge'][\"label\"].indexOf(\"SUBJ\") > -1) {\n                console.log(\"Question is about \" + token['text']['content']);\n                return;\n            }\n        }\n    });\n});\n\n//# sourceMappingURL=subjectOfTheText-compiled.js.map"]}