{"version":3,"sources":["indexAndroid-compiled.js"],"names":[],"mappings":"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","file":"indexAndroid-compiled-compiled.js","sourcesContent":["'use strict';\n\nconst bodyParser = require('body-parser');\nconst express = require('express');\nvar moment = require('moment');\n\n// get Bot, const, and Facebook API\n\nconst Helper = require('./helper.js');\nconst bot = require('./bot.js');\nconst Sessions = require('./sessions.js');\nconst Spell = require('./request.js');\nconst lContext = require('./localContexts.js');\nconst global = require('./global.js');\nconst Messages = require('./messages.js');\nconst Search = require('./logics.js');\nconst Mappings = require('./mapping.js');\nconst db = require('./pushintodb.js');\nconst sentenceParser = require('./cleanSentence');\n\n// Setting up our bot\n\n// Starting our web server and putting it all together\nconst app = express();\napp.use(bodyParser.json());\n\nvar server = require('http').createServer(app);\nvar port = 8885;\n\nglobal.io = require('socket.io')(server);\n\nserver.listen(port, function () {\n  console.log(\"started socket successfully : \" + \":\" + port);\n});\n\n// index. Let's say something fun\napp.get('/', function (req, res) {\n  res.send('\"Only those who will risk going too far can possibly find out how far one can go.\" - T.S. Eliot');\n});\n\nglobal.io.on('connection', function (socket) {\n  var addedUser = false;\n  console.log(\"New socket connection from user \");\n  //  console.log(\"socket id: \", socket.id);\n\n  // new   user request from android\n  socket.on('add user', function (data) {\n\n    console.log(\"Message on Add User: \", data);\n    if (addedUser) return;\n    data = JSON.parse(data);\n    var sessionId = data[\"session_id\"];\n    var socketId = socket.id;\n    var deviceId = data[\"device_id\"];\n\n    Sessions.CreateSessionAndroid(sessionId, deviceId);\n    global.storeUserSocket(sessionId, socket);\n    socket.emit('bot login', { sessionCreated: true, sessionId: sessionId });\n  });\n\n  socket.on('reconnect user', function (data) {\n\n    console.log(\"Message on Reconnect User: \", data);\n    if (data == null) return;\n\n    data = JSON.parse(data);\n    var sessionId = data[\"session_id\"];\n    var deviceId = data[\"device_id\"];\n    Sessions.CreateSessionAndroid(sessionId, deviceId);\n    global.storeUserSocket(sessionId, socket);\n    // socket.emit('bot login',{sessionCreated:true,sessionId:sessionId});\n  });\n\n  socket.on('dummy list', function (data) {\n\n    console.log(\"Message on dummy list: \", data);\n\n    data = JSON.parse(data);\n    var sessionId = data[\"session_id\"];\n\n    var spec_sort = { \"overall_score\": \"desc\", \"price\": \"asc\" };\n    var query = undefined;\n    var filter = { \"and\": [{ \"range\": { \"price\": { \"gte\": 0, \"lte\": 30000 } } }, {}] };\n    var fields = Mappings.getFieldsAttribute(\"skuAndroid\");\n\n    var sendJson = {};\n    Search.findSpecMobile(spec_sort, query, filter, fields, function (data) {\n      var phone_list = data.hits.hits;\n      console.log(\"length :\" + phone_list.length);\n      var list = [];\n      for (var i = 0; i < phone_list.length; i++) list.push(phone_list[i][\"fields\"]);\n      sendJson[\"username\"] = \"prodX\";\n      sendJson[\"message\"] = list;\n      sendJson[\"relevant_attribute\"] = [];\n      socket.emit(\"bot list\", sendJson);\n    });\n  });\n\n  // new message came\n  socket.on('user message', function (data) {\n\n    data = JSON.parse(data);\n    console.log(\"=============New message received  to bot:============ \", data);\n    var sessionId = data.sessionId;\n    var deviceId = data.deviceId;\n    var socketId = socket.id;\n    var email = data.email;\n\n    if (!Sessions.isAndroidSessionExists(sessionId)) {\n      Sessions.CreateSessionAndroid(sessionId, deviceId);\n      global.storeUserSocket(sessionId, socket);\n    }\n\n    var timestamp = moment().format('MMM DD, YYYY,h:mm:ss a');\n    timestamp = new Date().getTime();\n\n    var details = { 'session_id': sessionId, 'sender': sessionId, 'content': data.message, 'username': email, timestamp: timestamp };\n    db.inserttodB(details, \"chatapp_msg\");\n\n    var msg = sentenceParser.cleanSentence(data.message, function () {\n      bot.witProcessMessage(sessionId, data.message, email, \"android\", {}, function (result) {});\n    });\n  });\n});\n\nfunction appendSendJson(key, value, json) {\n  json[key] = value;\n}\n\n//# sourceMappingURL=indexAndroid-compiled.js.map"]}